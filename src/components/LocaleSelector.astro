---
import Link from "@/components/ui/Link.astro"
import CaretDown from "@/icons/phosphor/caret-down.svg"

const { pathname } = Astro.url
const path = pathname.split("/").slice(2).join("/")
const { currentLocale = "es" } = Astro

const { class: className } = Astro.props

const locales = [
  { code: "es", name: "Espa√±ol", clipPath: "polygon(3% 0%, 0% 100%, 100% 97%, 90% 0);" },
  { code: "gl", name: "Galego", clipPath: "polygon(0% 0%, 10% 97%, 99% 100%, 100% 0%);" },
  { code: "en", name: "English", clipPath: "polygon(7% 0%, 5% 95%, 99% 100%, 94% 0%);" },
]
---

<nav class:list={["font-medium tracking-wide text-secondary", className]}>
  <ul class="hidden lg:flex">
    {
      locales.map((locale) => (
        <Link href={`/${locale.code}/${path}`}>
          <li
            class:list={[
              "flex h-16 items-center justify-center px-10",
              "transition-opacity duration-200 motion-reduce:transition-none",
              {
                "bg-tertiary": currentLocale === locale.code,
                "bg-primary opacity-90 any-hover:opacity-100": currentLocale !== locale.code,
              },
            ]}
            style={{ "clip-path": locale.clipPath }}
          >
            {locale.name}
          </li>
        </Link>
      ))
    }
  </ul>
  <div class="relative inline-block lg:hidden">
    <div
      id="locale-container"
      tabindex="0"
      aria-haspopup="listbox"
      aria-expanded="false"
      aria-labelledby="locale-container"
      class="relative cursor-pointer"
    >
      <div
        class="flex h-16 min-w-[175px] items-center justify-center gap-2 bg-tertiary px-10"
        style="clip-path: polygon(3% 0%, 0% 100%, 100% 100%, 90% 0);"
      >
        {locales.find((locale) => locale.code === currentLocale)?.name}
        <CaretDown
          id="locale-caret"
          class:list={[
            "size-4 shrink-0",
            "transition-transform duration-200 ease-in-out motion-reduce:transition-none",
          ]}
        />
      </div>
      <ul
        id="locale-options"
        role="listbox"
        class="absolute left-0 top-full z-10 hidden max-h-80 w-full overflow-auto scrollbar-hide"
      >
        {
          locales
            .filter((locale) => locale.code !== currentLocale)
            .map((locale, index) => {
              return (
                <li>
                  <Link
                    href={`/${locale.code}/${path}`}
                    role="option"
                    tabindex={-1}
                    data-value={locale.code}
                    class:list={[
                      "inline-flex h-16 w-full items-center justify-center bg-primary px-10 opacity-90 outline-none",
                      "transition-colors duration-200 ease-in-out motion-reduce:transition-none",
                      "focus-within:opacity-100 focus-visible:opacity-100 any-hover:opacity-100",
                    ]}
                    style={{
                      "clip-path":
                        index === 0
                          ? "polygon(0% 0%, 10% 100%, 99% 100%, 100% 0%);"
                          : "polygon(10% 0%, 5% 95%, 99% 100%, 99% 0%);",
                    }}
                  >
                    {locale.name}
                  </Link>
                </li>
              )
            })
        }
      </ul>
    </div>
  </div>
</nav>

<script>
  document.addEventListener("astro:page-load", () => {
    const localeContainer = document.getElementById("locale-container") as HTMLDivElement
    const localeOptions = document.getElementById("locale-options") as HTMLUListElement
    const localeCaret = document.getElementById("locale-caret") as HTMLDivElement

    localeContainer.addEventListener("click", () => {
      const isExpanded = localeContainer.getAttribute("aria-expanded") === "true"

      localeContainer.setAttribute("aria-expanded", `${!isExpanded}`)
      localeCaret.classList.toggle("rotate-180")
      localeOptions.classList.toggle("hidden")
    })

    document.addEventListener("click", (event) => {
      if (!localeContainer.contains(event.target as Node)) {
        localeContainer.setAttribute("aria-expanded", "false")
        localeCaret.classList.remove("rotate-180")
        localeOptions.classList.add("hidden")
      }
    })

    localeContainer.addEventListener("keydown", (event: KeyboardEvent) => {
      const isExpanded = localeContainer.getAttribute("aria-expanded") === "true"

      if (event.key === "Enter" || event.key === " ") {
        if (!isExpanded) {
          localeContainer.setAttribute("aria-expanded", "true")
          localeCaret.classList.toggle("rotate-180")
          localeOptions.classList.toggle("hidden")

          event.preventDefault()
        } else {
          const selectedOption = document.activeElement?.closest(
            "[data-value]",
          ) as HTMLAnchorElement | null

          if (selectedOption && selectedOption.getAttribute("data-value") === "0") {
            selectedOption.click()

            event.preventDefault()
          }
        }
      }

      if (isExpanded && (event.key === "ArrowDown" || event.key === "ArrowUp")) {
        const options = localeOptions.querySelectorAll("[data-value]") as NodeListOf<HTMLElement>
        let index = Array.from(options).findIndex((option) => option === document.activeElement)

        if (event.key === "ArrowDown") index++
        if (event.key === "ArrowUp") index--
        if (index >= 0 && index < options.length) options[index]?.focus()

        event.preventDefault()
      }

      if (isExpanded && event.key === "Escape") {
        localeContainer.setAttribute("aria-expanded", "false")
        localeCaret.classList.remove("rotate-180")
        localeOptions.classList.add("hidden")
      }
    })
  })
</script>
